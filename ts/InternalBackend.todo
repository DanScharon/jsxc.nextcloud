$(document).on('click', '#jsxc_roster p', function () {
    if (jsxc.storage.getItem('serverType') === serverTypes.INTERNAL) {
        startInternalBackend();
    }
});

function startInternalBackend() {
    var currentUser = OC.currentUser;

    if (!currentUser) {
        return;
    }

    jsxc.bid = currentUser.toLowerCase() + '@' + window.location.host;

    jsxc.options.set('xmpp', {
        url: OC.generateUrl('apps/ojsxc/http-bind')
    });

    $(document).one('attached.jsxc', function () {
        if (jsxc.options.get('loginForm').startMinimized !== true) {
            jsxc.gui.roster.toggle(jsxc.CONST.SHOWN);
        }
    });

    jsxc.start(jsxc.bid + '/internal', 'internal', '123456');
}


if (jsxc.storage.getItem('serverType') === serverTypes.INTERNAL) {
    jsxc.gui.showLoginBox = function() {};
 }

 $(document).on('stateChange.jsxc', function _handler(event, state) {
    if (state === jsxc.CONST.STATE.SUSPEND) {
       /**
        * The first time we go into suspend mode we check if we are using the internal backend.
        * If this is the case and the user explicitly press the "login_without_chat" button when logging
        * into Nextcloud we know we are using another authentication mechanism (like SAML/SSO) and thus have
        * to manually start the connection.
        */
       var chatDisabledByUser = jsxc.storage.getUserItem('forcedLogout') || jsxc.storage.getItem('login_without_chat');
       $(document).off('stateChange.jsxc', _handler);
       if (jsxc.storage.getItem('serverType') === null) {
          $.ajax({
             url: OC.generateUrl('apps/ojsxc/settings/servertype'),
             success: function(data) {
                jsxc.storage.setItem('serverType', serverTypes[data.serverType.toUpperCase()]);

                if (data.serverType === 'internal' && !chatDisabledByUser) {
                   jsxc.gui.showLoginBox = function() {};
                   startInternalBackend();
                }
             }
          });
       } else if (jsxc.storage.getItem('serverType') === serverTypes.INTERNAL && !chatDisabledByUser) {
          jsxc.gui.showLoginBox = function() {};
          startInternalBackend();
       }
    } else if (state === jsxc.CONST.STATE.READY) {
       // if JSXC is ready this means we successfully connected and thus don't have to listen to the suspend state
       $(document).off('stateChange.jsxc', _handler);
    }
 });